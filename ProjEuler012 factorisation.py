"""
project euler 012: The sequence of triangle numbers is generated by adding the
natural numbers.

So the 7th triangle number would be: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors. What
is the value of the first triangle number to have over five hundred divisors?
"""

from math import sqrt
from datetime import datetime
starttime = datetime.now()

def factorCount(test,factorList):
    countFactor = 0

    if test == 0:
        return countFactor

    for i in range (1,int(sqrt(test))+1):

        if test%i == 0:
            factorList.append(i)
            factorList.append(int(test/i))

    countFactor = len(factorList)

    return countFactor



#=============
#generate and test triangular numbers

target = 70000
test = 0
countMax = 0
testMax = 0
factorMax = 500



for i in range(target+1):
    test += i
    factorList = []

    testCount = factorCount(test,factorList)

#    print("")
#    print("    ",factorList)
#    print("")
#    print("tri no:  ",test, "; factors:",testCount, "; time:",datetime.now() - starttime)

    if i%100 == 0 and i != 0:
        print("    no:  ",test, "; factors:",testCount, "; time:",datetime.now() - starttime)

    if testCount > countMax:
        countMax = testCount
        testMax = test
        print("tri no:  ",test, "; factors:",testCount, "; time:",datetime.now() - starttime)
        if countMax >= factorMax:
            break

#    print("-------------------------------------------------------------------------")
#    print("=========================================================================")


print("=== the end ===")
print("First triangular number with",factorMax,"factors or more is",testMax)
print("Execution time:", datetime.now() - starttime)
